namespace FaceitSharp.Chat.XMPP;

/// <summary>
/// Represents the base class for XML stanzas as are used by XMPP from which all implementations must derive.
/// </summary>
public abstract class Stanza
{
    private JID? _to;
    private JID? _from;
    private string? _id;
    private CultureInfo? _language;

    /// <summary>
    /// The data of the stanza.
    /// </summary>
    public XmlElement Element { get; init; }

    /// <summary>
    /// Specifies the JID of the intended recipient for the stanza.
    /// </summary>
    public JID? To
    {
        get => _to ??= Element.GetAttrJID("to");
        set => Element.SetAttr("to", _to = value);
    }

    /// <summary>
    /// Specifies the JID of the sender. If this is null, the stanza was generated by the client's server.
    /// </summary>
    public JID? From
    {
        get => _from ??= Element.GetAttrJID("from");
        set => Element.SetAttr("from", _from = value);
    }

    /// <summary>
    /// The ID of the stanza, which may be used for internal tracking of stanzas.
    /// </summary>
    public string? Id
    {
        get => _id ??= Element.GetAttr("id");
        set => Element.SetAttr("id", _id = value.ForceNull());
    }

    /// <summary>
    /// The language of the XML character data if the stanza contains data that is intended to be presented to a human user.
    /// </summary>
    public CultureInfo? Language
    {
        get
        {
            if (_language is not null) return _language;
            var lang = Element.GetAttr("xml:lang");
            if (lang is null) return null;
            return _language = CultureInfo.GetCultureInfo(lang);
        }
        set => Element.SetAttr("xml:lang", (_language = value)?.Name);
    }

    /// <summary>
    /// The namespace of the XML element
    /// </summary>
    public virtual string? Namespace
    {
        get => Element.NamespaceURI?.ForceNull();
        set => Element.SetAttr("xmlns", value);
    }

    /// <summary>
    /// Determines whether the stanza is empty, i.e. has no child nodes.
    /// </summary>
    public bool IsEmpty => Element.IsEmpty;

    /// <summary>
    /// Initializes a new instance of the Stanza class.
    /// </summary>
    /// <param name="element">The base element data</param>
    public Stanza(XmlElement element) => Element = element;

    /// <summary>
    /// Initializes a new instance of the Stanza class.
    /// </summary>
    /// <param name="elements"></param>
    public Stanza(params XmlElement?[] elements)
    {
        Element = Xml.Element(NodeName(), DefaultNamespace());
        foreach (var e in elements)
            if (e is not null)
                Element.Child(e);
    }

    /// <summary>
    /// The namespace to use for the XML element
    /// </summary>
    public virtual string? DefaultNamespace() => null;

    /// <summary>
    /// The name of the XML element node
    /// </summary>
    public virtual string NodeName() => GetType().Name.ToLowerInvariant();

    /// <summary>
    /// Returns a textual representation of this instance of the Stanza class.
    /// </summary>
    public override string ToString() => Element.ToXmlString();
}
